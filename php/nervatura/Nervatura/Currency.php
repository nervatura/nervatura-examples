<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto

namespace Nervatura;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *RequestUpdate Key->ID keys:
 *- ```id```: Currency *curr*
 *
 * Generated from protobuf message <code>nervatura.Currency</code>
 */
class Currency extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     */
    protected $id = 0;
    /**
     * The ISO 4217 code of the currency.
     *
     * Generated from protobuf field <code>string curr = 2;</code>
     */
    protected $curr = '';
    /**
     * The name of the currency.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     */
    protected $description = '';
    /**
     * The number of decimal places used for recording and rounding by the program. Default: 2
     *
     * Generated from protobuf field <code>int64 digit = 4;</code>
     */
    protected $digit = 0;
    /**
     * Default Rate. You can specify an exchange rate vs. the default currency, which will be used by the reports.
     *
     * Generated from protobuf field <code>double defrate = 5;</code>
     */
    protected $defrate = 0.0;
    /**
     * Rounding value for cash. Could be used in case the smallest banknote in circulation for that certain currency is not 1.
     *
     * Generated from protobuf field <code>int64 cround = 6;</code>
     */
    protected $cround = 0;
    /**
     * Currency meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 7;</code>
     */
    private $metadata;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $id
     *     @type string $curr
     *           The ISO 4217 code of the currency.
     *     @type string $description
     *           The name of the currency.
     *     @type int|string $digit
     *           The number of decimal places used for recording and rounding by the program. Default: 2
     *     @type float $defrate
     *           Default Rate. You can specify an exchange rate vs. the default currency, which will be used by the reports.
     *     @type int|string $cround
     *           Rounding value for cash. Could be used in case the smallest banknote in circulation for that certain currency is not 1.
     *     @type \Nervatura\MetaData[]|\Google\Protobuf\Internal\RepeatedField $metadata
     *           Currency meta data
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Api::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkInt64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * The ISO 4217 code of the currency.
     *
     * Generated from protobuf field <code>string curr = 2;</code>
     * @return string
     */
    public function getCurr()
    {
        return $this->curr;
    }

    /**
     * The ISO 4217 code of the currency.
     *
     * Generated from protobuf field <code>string curr = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCurr($var)
    {
        GPBUtil::checkString($var, True);
        $this->curr = $var;

        return $this;
    }

    /**
     * The name of the currency.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * The name of the currency.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * The number of decimal places used for recording and rounding by the program. Default: 2
     *
     * Generated from protobuf field <code>int64 digit = 4;</code>
     * @return int|string
     */
    public function getDigit()
    {
        return $this->digit;
    }

    /**
     * The number of decimal places used for recording and rounding by the program. Default: 2
     *
     * Generated from protobuf field <code>int64 digit = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDigit($var)
    {
        GPBUtil::checkInt64($var);
        $this->digit = $var;

        return $this;
    }

    /**
     * Default Rate. You can specify an exchange rate vs. the default currency, which will be used by the reports.
     *
     * Generated from protobuf field <code>double defrate = 5;</code>
     * @return float
     */
    public function getDefrate()
    {
        return $this->defrate;
    }

    /**
     * Default Rate. You can specify an exchange rate vs. the default currency, which will be used by the reports.
     *
     * Generated from protobuf field <code>double defrate = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setDefrate($var)
    {
        GPBUtil::checkDouble($var);
        $this->defrate = $var;

        return $this;
    }

    /**
     * Rounding value for cash. Could be used in case the smallest banknote in circulation for that certain currency is not 1.
     *
     * Generated from protobuf field <code>int64 cround = 6;</code>
     * @return int|string
     */
    public function getCround()
    {
        return $this->cround;
    }

    /**
     * Rounding value for cash. Could be used in case the smallest banknote in circulation for that certain currency is not 1.
     *
     * Generated from protobuf field <code>int64 cround = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCround($var)
    {
        GPBUtil::checkInt64($var);
        $this->cround = $var;

        return $this;
    }

    /**
     * Currency meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 7;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Currency meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 7;</code>
     * @param \Nervatura\MetaData[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Nervatura\MetaData::class);
        $this->metadata = $arr;

        return $this;
    }

}

