<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto

namespace Nervatura;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *RequestUpdate Key->ID keys:
 *- ```id```: Deffield *fieldname*
 *- ```nervatype```: Valid values: *address, barcode, contact, currency, customer, employee, event, item, link, log, movement, payment, price, place, product, project, rate, tax, tool, trans, setting*
 *- ```subtype```: All groupvalue from Groups, where groupname equal *custtype, placetype, protype, toolgroup, transtype*
 *- ```fieldtype```: Valid values: *bool, date, time, float, integer, string, valuelist, notes, urlink, password, customer, tool, transitem, transmovement, transpayment, product, project, employee, place*
 *
 * Generated from protobuf message <code>nervatura.Deffield</code>
 */
class Deffield extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     */
    protected $id = 0;
    /**
     * Generated from protobuf field <code>string fieldname = 2;</code>
     */
    protected $fieldname = '';
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     */
    protected $nervatype = 0;
    /**
     *  Reference to [Groups](#groups).id (where groupname in ('custtype','placetype','  protype','toolgroup','transtype'))
     *
     * Generated from protobuf field <code>int64 subtype = 4;</code>
     */
    protected $subtype = null;
    /**
     * Reference to [Groups](#groups).id  (only where groupname = 'fieldtype')
     *
     * Generated from protobuf field <code>int64 fieldtype = 5;</code>
     */
    protected $fieldtype = 0;
    /**
     * Generated from protobuf field <code>string description = 6;</code>
     */
    protected $description = '';
    /**
     * If fieldtype=valuelist: valid values are listed, separated by ~
     *
     * Generated from protobuf field <code>string valuelist = 7;</code>
     */
    protected $valuelist = '';
    /**
     * When selected, the attribute in case of adding a new element (eg a new customer or employee is created) will automatically be created with the default value according to its type and also will be attached to the new element.
     *
     * Generated from protobuf field <code>bool addnew = 8;</code>
     */
    protected $addnew = false;
    /**
     * Can appear or not (hidden value) on the entry forms
     *
     * Generated from protobuf field <code>bool visible = 9;</code>
     */
    protected $visible = false;
    /**
     * The value of the attribute can not be changed in the program interface
     *
     * Generated from protobuf field <code>bool readonly = 10;</code>
     */
    protected $readonly = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $id
     *     @type string $fieldname
     *     @type int|string $nervatype
     *           Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *     @type int|string $subtype
     *            Reference to [Groups](#groups).id (where groupname in ('custtype','placetype','  protype','toolgroup','transtype'))
     *     @type int|string $fieldtype
     *           Reference to [Groups](#groups).id  (only where groupname = 'fieldtype')
     *     @type string $description
     *     @type string $valuelist
     *           If fieldtype=valuelist: valid values are listed, separated by ~
     *     @type bool $addnew
     *           When selected, the attribute in case of adding a new element (eg a new customer or employee is created) will automatically be created with the default value according to its type and also will be attached to the new element.
     *     @type bool $visible
     *           Can appear or not (hidden value) on the entry forms
     *     @type bool $readonly
     *           The value of the attribute can not be changed in the program interface
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Api::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkInt64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string fieldname = 2;</code>
     * @return string
     */
    public function getFieldname()
    {
        return $this->fieldname;
    }

    /**
     * Generated from protobuf field <code>string fieldname = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setFieldname($var)
    {
        GPBUtil::checkString($var, True);
        $this->fieldname = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     * @return int|string
     */
    public function getNervatype()
    {
        return $this->nervatype;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNervatype($var)
    {
        GPBUtil::checkInt64($var);
        $this->nervatype = $var;

        return $this;
    }

    /**
     *  Reference to [Groups](#groups).id (where groupname in ('custtype','placetype','  protype','toolgroup','transtype'))
     *
     * Generated from protobuf field <code>int64 subtype = 4;</code>
     * @return int|string
     */
    public function getSubtype()
    {
        return isset($this->subtype) ? $this->subtype : 0;
    }

    public function hasSubtype()
    {
        return isset($this->subtype);
    }

    public function clearSubtype()
    {
        unset($this->subtype);
    }

    /**
     *  Reference to [Groups](#groups).id (where groupname in ('custtype','placetype','  protype','toolgroup','transtype'))
     *
     * Generated from protobuf field <code>int64 subtype = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSubtype($var)
    {
        GPBUtil::checkInt64($var);
        $this->subtype = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id  (only where groupname = 'fieldtype')
     *
     * Generated from protobuf field <code>int64 fieldtype = 5;</code>
     * @return int|string
     */
    public function getFieldtype()
    {
        return $this->fieldtype;
    }

    /**
     * Reference to [Groups](#groups).id  (only where groupname = 'fieldtype')
     *
     * Generated from protobuf field <code>int64 fieldtype = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFieldtype($var)
    {
        GPBUtil::checkInt64($var);
        $this->fieldtype = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string description = 6;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Generated from protobuf field <code>string description = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * If fieldtype=valuelist: valid values are listed, separated by ~
     *
     * Generated from protobuf field <code>string valuelist = 7;</code>
     * @return string
     */
    public function getValuelist()
    {
        return $this->valuelist;
    }

    /**
     * If fieldtype=valuelist: valid values are listed, separated by ~
     *
     * Generated from protobuf field <code>string valuelist = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setValuelist($var)
    {
        GPBUtil::checkString($var, True);
        $this->valuelist = $var;

        return $this;
    }

    /**
     * When selected, the attribute in case of adding a new element (eg a new customer or employee is created) will automatically be created with the default value according to its type and also will be attached to the new element.
     *
     * Generated from protobuf field <code>bool addnew = 8;</code>
     * @return bool
     */
    public function getAddnew()
    {
        return $this->addnew;
    }

    /**
     * When selected, the attribute in case of adding a new element (eg a new customer or employee is created) will automatically be created with the default value according to its type and also will be attached to the new element.
     *
     * Generated from protobuf field <code>bool addnew = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setAddnew($var)
    {
        GPBUtil::checkBool($var);
        $this->addnew = $var;

        return $this;
    }

    /**
     * Can appear or not (hidden value) on the entry forms
     *
     * Generated from protobuf field <code>bool visible = 9;</code>
     * @return bool
     */
    public function getVisible()
    {
        return $this->visible;
    }

    /**
     * Can appear or not (hidden value) on the entry forms
     *
     * Generated from protobuf field <code>bool visible = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setVisible($var)
    {
        GPBUtil::checkBool($var);
        $this->visible = $var;

        return $this;
    }

    /**
     * The value of the attribute can not be changed in the program interface
     *
     * Generated from protobuf field <code>bool readonly = 10;</code>
     * @return bool
     */
    public function getReadonly()
    {
        return $this->readonly;
    }

    /**
     * The value of the attribute can not be changed in the program interface
     *
     * Generated from protobuf field <code>bool readonly = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setReadonly($var)
    {
        GPBUtil::checkBool($var);
        $this->readonly = $var;

        return $this;
    }

}

