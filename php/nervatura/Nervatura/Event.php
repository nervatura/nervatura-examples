<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto

namespace Nervatura;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *RequestUpdate Key->ID keys:
 *- ```id```: Event *calnumber*
 *- ```nervatype```: Valid values: *customer, employee, place, product, project, tool, trans*
 *- ```ref_id```: Valid values: *customer/{custnumber}, employee/{empnumber}, place/{planumber}, product/{partnumber}, project/{pronumber}, tool/{serial}, trans/{transnumber}*
 *- ```eventgroup```: All groupvalue from Groups, where groupname equal eventgroup
 *
 * Generated from protobuf message <code>nervatura.Event</code>
 */
class Event extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     */
    protected $id = 0;
    /**
     * Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = calnumber) data series.
     *
     * Generated from protobuf field <code>string calnumber = 2;</code>
     */
    protected $calnumber = '';
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     */
    protected $nervatype = 0;
    /**
     * Reference to [Customer](#customer).id, [Employee](#employee).id, [Place](#place).id, [Product](#product).id, [Project](#project).id, [Tool](#tool).id, [Trans](#trans).id
     *
     * Generated from protobuf field <code>int64 ref_id = 4;</code>
     */
    protected $ref_id = 0;
    /**
     * Generated from protobuf field <code>string uid = 5;</code>
     */
    protected $uid = '';
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'eventgroup')
     *
     * Generated from protobuf field <code>int64 eventgroup = 6;</code>
     */
    protected $eventgroup = null;
    /**
     * Datetime
     *
     * Generated from protobuf field <code>string fromdate = 7;</code>
     */
    protected $fromdate = '';
    /**
     * Datetime
     *
     * Generated from protobuf field <code>string todate = 8;</code>
     */
    protected $todate = null;
    /**
     * Generated from protobuf field <code>string subject = 9;</code>
     */
    protected $subject = '';
    /**
     * Generated from protobuf field <code>string place = 10;</code>
     */
    protected $place = '';
    /**
     * Generated from protobuf field <code>string description = 11;</code>
     */
    protected $description = '';
    /**
     * Event meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 12;</code>
     */
    private $metadata;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $id
     *     @type string $calnumber
     *           Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = calnumber) data series.
     *     @type int|string $nervatype
     *           Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *     @type int|string $ref_id
     *           Reference to [Customer](#customer).id, [Employee](#employee).id, [Place](#place).id, [Product](#product).id, [Project](#project).id, [Tool](#tool).id, [Trans](#trans).id
     *     @type string $uid
     *     @type int|string $eventgroup
     *           Reference to [Groups](#groups).id (only where groupname = 'eventgroup')
     *     @type string $fromdate
     *           Datetime
     *     @type string $todate
     *           Datetime
     *     @type string $subject
     *     @type string $place
     *     @type string $description
     *     @type \Nervatura\MetaData[]|\Google\Protobuf\Internal\RepeatedField $metadata
     *           Event meta data
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Api::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkInt64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = calnumber) data series.
     *
     * Generated from protobuf field <code>string calnumber = 2;</code>
     * @return string
     */
    public function getCalnumber()
    {
        return $this->calnumber;
    }

    /**
     * Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = calnumber) data series.
     *
     * Generated from protobuf field <code>string calnumber = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCalnumber($var)
    {
        GPBUtil::checkString($var, True);
        $this->calnumber = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     * @return int|string
     */
    public function getNervatype()
    {
        return $this->nervatype;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNervatype($var)
    {
        GPBUtil::checkInt64($var);
        $this->nervatype = $var;

        return $this;
    }

    /**
     * Reference to [Customer](#customer).id, [Employee](#employee).id, [Place](#place).id, [Product](#product).id, [Project](#project).id, [Tool](#tool).id, [Trans](#trans).id
     *
     * Generated from protobuf field <code>int64 ref_id = 4;</code>
     * @return int|string
     */
    public function getRefId()
    {
        return $this->ref_id;
    }

    /**
     * Reference to [Customer](#customer).id, [Employee](#employee).id, [Place](#place).id, [Product](#product).id, [Project](#project).id, [Tool](#tool).id, [Trans](#trans).id
     *
     * Generated from protobuf field <code>int64 ref_id = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRefId($var)
    {
        GPBUtil::checkInt64($var);
        $this->ref_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string uid = 5;</code>
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }

    /**
     * Generated from protobuf field <code>string uid = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->uid = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'eventgroup')
     *
     * Generated from protobuf field <code>int64 eventgroup = 6;</code>
     * @return int|string
     */
    public function getEventgroup()
    {
        return isset($this->eventgroup) ? $this->eventgroup : 0;
    }

    public function hasEventgroup()
    {
        return isset($this->eventgroup);
    }

    public function clearEventgroup()
    {
        unset($this->eventgroup);
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'eventgroup')
     *
     * Generated from protobuf field <code>int64 eventgroup = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setEventgroup($var)
    {
        GPBUtil::checkInt64($var);
        $this->eventgroup = $var;

        return $this;
    }

    /**
     * Datetime
     *
     * Generated from protobuf field <code>string fromdate = 7;</code>
     * @return string
     */
    public function getFromdate()
    {
        return $this->fromdate;
    }

    /**
     * Datetime
     *
     * Generated from protobuf field <code>string fromdate = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setFromdate($var)
    {
        GPBUtil::checkString($var, True);
        $this->fromdate = $var;

        return $this;
    }

    /**
     * Datetime
     *
     * Generated from protobuf field <code>string todate = 8;</code>
     * @return string
     */
    public function getTodate()
    {
        return isset($this->todate) ? $this->todate : '';
    }

    public function hasTodate()
    {
        return isset($this->todate);
    }

    public function clearTodate()
    {
        unset($this->todate);
    }

    /**
     * Datetime
     *
     * Generated from protobuf field <code>string todate = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setTodate($var)
    {
        GPBUtil::checkString($var, True);
        $this->todate = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string subject = 9;</code>
     * @return string
     */
    public function getSubject()
    {
        return $this->subject;
    }

    /**
     * Generated from protobuf field <code>string subject = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setSubject($var)
    {
        GPBUtil::checkString($var, True);
        $this->subject = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string place = 10;</code>
     * @return string
     */
    public function getPlace()
    {
        return $this->place;
    }

    /**
     * Generated from protobuf field <code>string place = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setPlace($var)
    {
        GPBUtil::checkString($var, True);
        $this->place = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string description = 11;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Generated from protobuf field <code>string description = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * Event meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 12;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Event meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 12;</code>
     * @param \Nervatura\MetaData[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Nervatura\MetaData::class);
        $this->metadata = $arr;

        return $this;
    }

}

