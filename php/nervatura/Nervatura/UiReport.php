<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto

namespace Nervatura;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *RequestUpdate Key->ID keys:
 *- ```id```: UiReport *reportkey*
 *- ```nervatype```: all groupvalue from Groups, where groupname equal nervatype
 *- ```transtype```: all groupvalue from Groups, where groupname equal transtype
 *- ```direction```: all groupvalue from Groups, where groupname equal direction
 *- ```filetype```: all groupvalue from Groups, where groupname equal filetype
 *
 * Generated from protobuf message <code>nervatura.UiReport</code>
 */
class UiReport extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     */
    protected $id = 0;
    /**
     * Generated from protobuf field <code>string reportkey = 2;</code>
     */
    protected $reportkey = '';
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     */
    protected $nervatype = 0;
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'transtype')
     *
     * Generated from protobuf field <code>int64 transtype = 4;</code>
     */
    protected $transtype = null;
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'direction')
     *
     * Generated from protobuf field <code>int64 direction = 5;</code>
     */
    protected $direction = null;
    /**
     * Generated from protobuf field <code>string repname = 6;</code>
     */
    protected $repname = '';
    /**
     * Generated from protobuf field <code>string description = 7;</code>
     */
    protected $description = '';
    /**
     * Generated from protobuf field <code>string label = 8;</code>
     */
    protected $label = '';
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'filetype')
     *
     * Generated from protobuf field <code>int64 filetype = 9;</code>
     */
    protected $filetype = 0;
    /**
     * Generated from protobuf field <code>string report = 10;</code>
     */
    protected $report = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $id
     *     @type string $reportkey
     *     @type int|string $nervatype
     *           Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *     @type int|string $transtype
     *           Reference to [Groups](#groups).id (only where groupname = 'transtype')
     *     @type int|string $direction
     *           Reference to [Groups](#groups).id (only where groupname = 'direction')
     *     @type string $repname
     *     @type string $description
     *     @type string $label
     *     @type int|string $filetype
     *           Reference to [Groups](#groups).id (only where groupname = 'filetype')
     *     @type string $report
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Api::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkInt64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string reportkey = 2;</code>
     * @return string
     */
    public function getReportkey()
    {
        return $this->reportkey;
    }

    /**
     * Generated from protobuf field <code>string reportkey = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setReportkey($var)
    {
        GPBUtil::checkString($var, True);
        $this->reportkey = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     * @return int|string
     */
    public function getNervatype()
    {
        return $this->nervatype;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'nervatype')
     *
     * Generated from protobuf field <code>int64 nervatype = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNervatype($var)
    {
        GPBUtil::checkInt64($var);
        $this->nervatype = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'transtype')
     *
     * Generated from protobuf field <code>int64 transtype = 4;</code>
     * @return int|string
     */
    public function getTranstype()
    {
        return isset($this->transtype) ? $this->transtype : 0;
    }

    public function hasTranstype()
    {
        return isset($this->transtype);
    }

    public function clearTranstype()
    {
        unset($this->transtype);
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'transtype')
     *
     * Generated from protobuf field <code>int64 transtype = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTranstype($var)
    {
        GPBUtil::checkInt64($var);
        $this->transtype = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'direction')
     *
     * Generated from protobuf field <code>int64 direction = 5;</code>
     * @return int|string
     */
    public function getDirection()
    {
        return isset($this->direction) ? $this->direction : 0;
    }

    public function hasDirection()
    {
        return isset($this->direction);
    }

    public function clearDirection()
    {
        unset($this->direction);
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'direction')
     *
     * Generated from protobuf field <code>int64 direction = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDirection($var)
    {
        GPBUtil::checkInt64($var);
        $this->direction = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string repname = 6;</code>
     * @return string
     */
    public function getRepname()
    {
        return $this->repname;
    }

    /**
     * Generated from protobuf field <code>string repname = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setRepname($var)
    {
        GPBUtil::checkString($var, True);
        $this->repname = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string description = 7;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Generated from protobuf field <code>string description = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string label = 8;</code>
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * Generated from protobuf field <code>string label = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setLabel($var)
    {
        GPBUtil::checkString($var, True);
        $this->label = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'filetype')
     *
     * Generated from protobuf field <code>int64 filetype = 9;</code>
     * @return int|string
     */
    public function getFiletype()
    {
        return $this->filetype;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'filetype')
     *
     * Generated from protobuf field <code>int64 filetype = 9;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFiletype($var)
    {
        GPBUtil::checkInt64($var);
        $this->filetype = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string report = 10;</code>
     * @return string
     */
    public function getReport()
    {
        return $this->report;
    }

    /**
     * Generated from protobuf field <code>string report = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setReport($var)
    {
        GPBUtil::checkString($var, True);
        $this->report = $var;

        return $this;
    }

}

