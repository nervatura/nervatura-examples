<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto

namespace Nervatura;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *RequestUpdate Key->ID keys:
 *- ```id```: Place *planumber*
 *- ```placetype```: Valid values: *bank, cash, warehouse, other*
 *
 * Generated from protobuf message <code>nervatura.Place</code>
 */
class Place extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     */
    protected $id = 0;
    /**
     * Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = planumber) data series.
     *
     * Generated from protobuf field <code>string planumber = 2;</code>
     */
    protected $planumber = '';
    /**
     * Reference to [Groups](#groups).id (only where groupname = 'placetype')
     *
     * Generated from protobuf field <code>int64 placetype = 3;</code>
     */
    protected $placetype = 0;
    /**
     * Generated from protobuf field <code>string description = 4;</code>
     */
    protected $description = '';
    /**
     * Generated from protobuf field <code>string curr = 5;</code>
     */
    protected $curr = null;
    /**
     * Generated from protobuf field <code>bool defplace = 6;</code>
     */
    protected $defplace = false;
    /**
     * Generated from protobuf field <code>string notes = 7;</code>
     */
    protected $notes = '';
    /**
     * Generated from protobuf field <code>bool inactive = 8;</code>
     */
    protected $inactive = false;
    /**
     * Place meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 9;</code>
     */
    private $metadata;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $id
     *     @type string $planumber
     *           Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = planumber) data series.
     *     @type int|string $placetype
     *           Reference to [Groups](#groups).id (only where groupname = 'placetype')
     *     @type string $description
     *     @type string $curr
     *     @type bool $defplace
     *     @type string $notes
     *     @type bool $inactive
     *     @type \Nervatura\MetaData[]|\Google\Protobuf\Internal\RepeatedField $metadata
     *           Place meta data
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Api::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkInt64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = planumber) data series.
     *
     * Generated from protobuf field <code>string planumber = 2;</code>
     * @return string
     */
    public function getPlanumber()
    {
        return $this->planumber;
    }

    /**
     * Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = planumber) data series.
     *
     * Generated from protobuf field <code>string planumber = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setPlanumber($var)
    {
        GPBUtil::checkString($var, True);
        $this->planumber = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'placetype')
     *
     * Generated from protobuf field <code>int64 placetype = 3;</code>
     * @return int|string
     */
    public function getPlacetype()
    {
        return $this->placetype;
    }

    /**
     * Reference to [Groups](#groups).id (only where groupname = 'placetype')
     *
     * Generated from protobuf field <code>int64 placetype = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPlacetype($var)
    {
        GPBUtil::checkInt64($var);
        $this->placetype = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string description = 4;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Generated from protobuf field <code>string description = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string curr = 5;</code>
     * @return string
     */
    public function getCurr()
    {
        return isset($this->curr) ? $this->curr : '';
    }

    public function hasCurr()
    {
        return isset($this->curr);
    }

    public function clearCurr()
    {
        unset($this->curr);
    }

    /**
     * Generated from protobuf field <code>string curr = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setCurr($var)
    {
        GPBUtil::checkString($var, True);
        $this->curr = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool defplace = 6;</code>
     * @return bool
     */
    public function getDefplace()
    {
        return $this->defplace;
    }

    /**
     * Generated from protobuf field <code>bool defplace = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setDefplace($var)
    {
        GPBUtil::checkBool($var);
        $this->defplace = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string notes = 7;</code>
     * @return string
     */
    public function getNotes()
    {
        return $this->notes;
    }

    /**
     * Generated from protobuf field <code>string notes = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setNotes($var)
    {
        GPBUtil::checkString($var, True);
        $this->notes = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool inactive = 8;</code>
     * @return bool
     */
    public function getInactive()
    {
        return $this->inactive;
    }

    /**
     * Generated from protobuf field <code>bool inactive = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setInactive($var)
    {
        GPBUtil::checkBool($var);
        $this->inactive = $var;

        return $this;
    }

    /**
     * Place meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 9;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Place meta data
     *
     * Generated from protobuf field <code>repeated .nervatura.MetaData metadata = 9;</code>
     * @param \Nervatura\MetaData[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Nervatura\MetaData::class);
        $this->metadata = $arr;

        return $this;
    }

}

