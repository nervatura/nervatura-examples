<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto

namespace Nervatura;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *RequestUpdate Key->ID keys:
 *- ```id```: Barcode *code*
 *- ```barcodetype```: Valid values: *CODE_128, CODE_39, EAN_13, EAN_8, QR*
 *- ```product_id```: Product *partnumber*
 *
 * Generated from protobuf message <code>nervatura.Barcode</code>
 */
class Barcode extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     */
    protected $id = 0;
    /**
     * Each product can be connected to any number of bar codes, but the code must remain unique to ensure that the product is clearly identifiable.
     *
     * Generated from protobuf field <code>string code = 2;</code>
     */
    protected $code = '';
    /**
     * Reference to [Product](#product).id
     *
     * Generated from protobuf field <code>int64 product_id = 3;</code>
     */
    protected $product_id = 0;
    /**
     * Comment related to the barcode. Informal, has no role in identification.
     *
     * Generated from protobuf field <code>string description = 4;</code>
     */
    protected $description = '';
    /**
     * Reference to [Groups](#groups).id  (only where groupname = 'barcodetype').
     *
     * Generated from protobuf field <code>int64 barcodetype = 5;</code>
     */
    protected $barcodetype = 0;
    /**
     * The actual amount of the products identified by the barcode. For example can be used for packaged goods, tray packaging.
     *
     * Generated from protobuf field <code>double qty = 6;</code>
     */
    protected $qty = 0.0;
    /**
     * If more than one bar code is assigned, this will be the default. Because of the uniqueness of the barcode the product is always clearly identifiable, but in reverse case (eg. in case the barcode should be printed on a document) we must assign one being the default for that product.
     *
     * Generated from protobuf field <code>bool defcode = 7;</code>
     */
    protected $defcode = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $id
     *     @type string $code
     *           Each product can be connected to any number of bar codes, but the code must remain unique to ensure that the product is clearly identifiable.
     *     @type int|string $product_id
     *           Reference to [Product](#product).id
     *     @type string $description
     *           Comment related to the barcode. Informal, has no role in identification.
     *     @type int|string $barcodetype
     *           Reference to [Groups](#groups).id  (only where groupname = 'barcodetype').
     *     @type float $qty
     *           The actual amount of the products identified by the barcode. For example can be used for packaged goods, tray packaging.
     *     @type bool $defcode
     *           If more than one bar code is assigned, this will be the default. Because of the uniqueness of the barcode the product is always clearly identifiable, but in reverse case (eg. in case the barcode should be printed on a document) we must assign one being the default for that product.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Api::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Generated from protobuf field <code>int64 id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkInt64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * Each product can be connected to any number of bar codes, but the code must remain unique to ensure that the product is clearly identifiable.
     *
     * Generated from protobuf field <code>string code = 2;</code>
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Each product can be connected to any number of bar codes, but the code must remain unique to ensure that the product is clearly identifiable.
     *
     * Generated from protobuf field <code>string code = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->code = $var;

        return $this;
    }

    /**
     * Reference to [Product](#product).id
     *
     * Generated from protobuf field <code>int64 product_id = 3;</code>
     * @return int|string
     */
    public function getProductId()
    {
        return $this->product_id;
    }

    /**
     * Reference to [Product](#product).id
     *
     * Generated from protobuf field <code>int64 product_id = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setProductId($var)
    {
        GPBUtil::checkInt64($var);
        $this->product_id = $var;

        return $this;
    }

    /**
     * Comment related to the barcode. Informal, has no role in identification.
     *
     * Generated from protobuf field <code>string description = 4;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Comment related to the barcode. Informal, has no role in identification.
     *
     * Generated from protobuf field <code>string description = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * Reference to [Groups](#groups).id  (only where groupname = 'barcodetype').
     *
     * Generated from protobuf field <code>int64 barcodetype = 5;</code>
     * @return int|string
     */
    public function getBarcodetype()
    {
        return $this->barcodetype;
    }

    /**
     * Reference to [Groups](#groups).id  (only where groupname = 'barcodetype').
     *
     * Generated from protobuf field <code>int64 barcodetype = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBarcodetype($var)
    {
        GPBUtil::checkInt64($var);
        $this->barcodetype = $var;

        return $this;
    }

    /**
     * The actual amount of the products identified by the barcode. For example can be used for packaged goods, tray packaging.
     *
     * Generated from protobuf field <code>double qty = 6;</code>
     * @return float
     */
    public function getQty()
    {
        return $this->qty;
    }

    /**
     * The actual amount of the products identified by the barcode. For example can be used for packaged goods, tray packaging.
     *
     * Generated from protobuf field <code>double qty = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setQty($var)
    {
        GPBUtil::checkDouble($var);
        $this->qty = $var;

        return $this;
    }

    /**
     * If more than one bar code is assigned, this will be the default. Because of the uniqueness of the barcode the product is always clearly identifiable, but in reverse case (eg. in case the barcode should be printed on a document) we must assign one being the default for that product.
     *
     * Generated from protobuf field <code>bool defcode = 7;</code>
     * @return bool
     */
    public function getDefcode()
    {
        return $this->defcode;
    }

    /**
     * If more than one bar code is assigned, this will be the default. Because of the uniqueness of the barcode the product is always clearly identifiable, but in reverse case (eg. in case the barcode should be printed on a document) we must assign one being the default for that product.
     *
     * Generated from protobuf field <code>bool defcode = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setDefcode($var)
    {
        GPBUtil::checkBool($var);
        $this->defcode = $var;

        return $this;
    }

}

